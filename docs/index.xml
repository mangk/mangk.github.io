<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🥳</title>
    <link>https://solobit.cn/</link>
    <description>Recent content on 🥳</description>
    <image>
      <title>🥳</title>
      <url>https://solobit.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://solobit.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 07 Mar 2024 11:34:24 +0800</lastBuildDate>
    <atom:link href="https://solobit.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLite获取毫秒时间戳</title>
      <link>https://solobit.cn/post/sqlite%E8%8E%B7%E5%8F%96%E6%AF%AB%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3/</link>
      <pubDate>Thu, 07 Mar 2024 11:34:24 +0800</pubDate>
      <guid>https://solobit.cn/post/sqlite%E8%8E%B7%E5%8F%96%E6%AF%AB%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3/</guid>
      <description>先说结论 SQLite 获取毫秒级时间戳可以通过拼接的方式：
-- 通过 SQLite 内置函数拼凑毫秒时间戳 SELECT (strftime(&amp;#39;%s&amp;#39;, &amp;#39;now&amp;#39;) * 1000 + substr(strftime(&amp;#39;%f&amp;#39;, &amp;#39;now&amp;#39;),4,3)) AS milliseconds; --&amp;gt;结果：1709783374677 唠叨一下我在干什么 最近在开发中使用到了 SQLite 来讲数据保存到本地，并有条件的将数据同步到云端。所以我设计了表结果如下：
服务端表 CREATE TABLE `book` ( `id` int NOT NULL AUTO_INCREMENT, `local_id` bigint NOT NULL COMMENT &amp;#39;用户本地数据表id&amp;#39;, `uid` int NOT NULL COMMENT &amp;#39;所属用户&amp;#39;, other columns... PRIMARY KEY (`id`), UNIQUE KEY `user_local_data_idx` (`local_id`,`uid`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; 客户端 SQLite 表 CREATE TABLE book	( id TIMESTAMP PRIMARY KEY, other columns.</description>
    </item>
    <item>
      <title>小程序wx.navigateTo中的闭包</title>
      <link>https://solobit.cn/post/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwx-navigateto%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</link>
      <pubDate>Thu, 02 Nov 2023 18:04:38 +0000</pubDate>
      <guid>https://solobit.cn/post/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwx-navigateto%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</guid>
      <description>序 最近的开发任务中处理了这样一个情况:
打开小程序是从onLoad判断是否携带参数 判断用户是否登录 如果没有登录需要跳转登录并跳转回来 回来后继续使用(1)中携带的参数处理问题 听起来没有什么难点，我们只需要设置app.globleData就可以很轻松的完成需求。但是我思考问题的点在于登录环节：如果每次有类似的需求都要去改动登录页的代码，那会让登录页面的if条件越来越多，代码可读性也会持续下降。
于是我开始查找对登录页面修改最少的解决方案：
使用wx.router来完成需求，但是我不是专业写前端的，而是被拉来救急的，让我去看文档写代码是在太慢了。而且如果整个小程序都改用wx.router，这其中的修改成本也太高了。 使用app.globleData前面说了，也不太可取 最终我发现了wx.navigateTo中的success可以处理我的问题。 所以在这里将我的思路写下来做记录，也提供给有同样需求的人参考。
还是要用到app.globleData 是的，我的方式中还是要对app.globleData进行设置，但是约定了统一的格式，无论在哪个页面。
var pages = getCurrentPages() var curPage = pages[pages.length-1] app.globleData.navigateInfo = { url:&amp;#34;/&amp;#34;+curPage.route, success: function (e) { var page = getCurrentPages().pop() if (page == undefined || page == null) return; page.selectComponent(&amp;#34;#coupon&amp;#34;).runCoupon(); } } 在登录页面只需要判断app.globleData.navigateInfo这一个参数，并在完成登录操作后直接将navigateInfo对象交给wx.navigateTo方法执行就跳回了原来的页面。
这里面神奇的点在于可以直接执行组件中的某个方法</description>
    </item>
    <item>
      <title>免费泛域名SSL证书</title>
      <link>https://solobit.cn/post/%E5%85%8D%E8%B4%B9%E6%B3%9B%E5%9F%9F%E5%90%8Dssl%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Thu, 09 Mar 2023 19:20:34 +0000</pubDate>
      <guid>https://solobit.cn/post/%E5%85%8D%E8%B4%B9%E6%B3%9B%E5%9F%9F%E5%90%8Dssl%E8%AF%81%E4%B9%A6/</guid>
      <description>使用acme.sh配置泛域名证书 安装acme.sh 安装 curl https://get.acme.sh | sh -s email=youEmail@email.com 生成泛域名证书： 执行命令 acme.sh --issue --dns -d *.youDomin.com \ --yes-I-know-dns-manual-mode-enough-go-ahead-please 这时候会输出生成如下内容 Using CA: https://acme.zerossl.com/v2/DV90 Single domain=&amp;#39;*.youDomin.com&amp;#39; Getting domain auth token for each domain Getting webroot for domain=&amp;#39;*.youDomin.com&amp;#39; Add the following TXT record: Domain: &amp;#39;_acme-challenge.youDomin.com&amp;#39; TXT value: &amp;#39;fdlkajflajfkdlJFKLDSAJFLKJDSLKJF&amp;#39; Please be aware that you prepend _acme-challenge. before your domain so the resulting subdomain will be: _acme-challenge.youDomin.com Please add the TXT records to the domains, and re-run with --renew.</description>
    </item>
    <item>
      <title>NFC基础知识与读写</title>
      <link>https://solobit.cn/post/nfc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E8%AF%BB%E5%86%99/</link>
      <pubDate>Fri, 18 Nov 2022 16:59:43 +0000</pubDate>
      <guid>https://solobit.cn/post/nfc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E8%AF%BB%E5%86%99/</guid>
      <description>序 最近的项目需求中，需要使用NFC芯片来保存一些类似于url的信息并通过iOS或Android手机能正常获取到相关信息，所以针对NFC相关技术与特点进行了学习和总结。我会把我看过教程链接也同步贴到文章中。因为手上只有M1卡，所以下面的主要内容也围绕M1卡来进行
什么是NFC 近场通信（英语：Near-field communication，NFC），又称近距离无线通信、近距离通信，是一套通信协议，让两个电子设备（其中一个通常是移动设备，例如智能手机）在相距几厘米之内进行通信。NFC，如同过去的电子票券智能卡一般，将允许移动支付取代或支持这类系统。NFC应用于社交网络，分享联系方式、照片、视频或文件。具备 NFC 功能的设备可以充当电子身份证和钥匙卡。NFC 提供了设置简便的低速连接，也可用于引导能力更强的无线连接。
近场通信技术由非接触式射频识别（RFID）演变而来，由飞利浦半导体（现恩智浦半导体）、诺基亚和索尼共同于2004年研制开发，其基础是RFID及互连技术。近场通信是一种短距高频的无线电技术，在13.56MHz频率运行于20厘米距离内。其传输速度有106 Kbit/秒、212 Kbit/秒或者424 Kbit/秒三种。目前近场通信已通过成为ISO/IEC IS 18092国际标准、EMCA-340标准与ETSI TS 102 190标准。NFC采用主动和被动两种读取模式。
每一个完整的NFC设备可以用三种模式工作：
卡模拟模式（Card emulation mode）：这个模式其实就是相当于一张采用RFID技术的IC卡。可以替代现在大量的IC卡（包括信用卡）场合商场刷卡、IPASS、门禁管制、车票、门票等等。此种方式下，有一个极大的优点，那就是卡片通过非接触读卡器的RF域来供电，即便是寄主设备（如手机）没电也可以工作。NFC设备若要进行卡片模拟（Card Emulation）相关应用，则必须内置安全组件（Security Element, SE）之NFC芯片或通过软件实现主机卡模拟(Host Card Emulation，HCE)。 读卡器模式（Reader/Writer mode）：作为非接触读卡器使用，比如从海报或者展览信息电子标签上读取相关信息。 点对点模式（P2P mode）：这个模式和红外线差不多，可用于数据交换，只是传输距离较短，传输创建速度较快，传输速度也快些，功耗低（蓝牙也类似）。将两个具备NFC功能的设备链接，能实现数据点对点传输，如下载音乐、交换图片或者同步设备地址薄。因此通过NFC，多个设备如数位相机、PDA、计算机和手机之间都可以交换资料或者服务。 维基百科-近场通信 百度-NFC
各种NFC卡的区别 卡 功能描述 普通IC卡 0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。 UID 卡 普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。 CUID 卡 可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。 FUID 卡 不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。 UFUID 卡 高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。 知乎-司小凯-UID卡、IC卡、ID卡、CUID 卡、FUID 卡、UFUID 卡 的区别
NFC标签类型 目前iOS系统并没有开放过多的NFC权限，所以这里讨论通过Android系统操作NFC标签，以下是Android系统操作NFC标签支持的标签技术类型
Class Description TagTechnology 这是所有标签技术类都必须实现的接口。 NfcA 提供对 NFC-A (ISO 14443-3A) 属性和 I/O 操作的访问权限。 NfcB 提供对 NFC-B (ISO 14443-3B) 属性和 I/O 操作的访问权限。 NfcF 提供对 NFC-F (JIS 6319-4) 属性和 I/O 操作的访问权限。 NfcV 提供对 NFC-V (ISO 15693) 属性和 I/O 操作的访问权限。 IsoDep 提供对 ISO-DEP (ISO 14443-4) 属性和 I/O 操作的访问权限。 Ndef 提供对 NDEF 格式的 NFC 标签上的 NDEF 数据和操作的访问权限。 NdefFormatable 为可设置为 NDEF 格式的标签提供格式化操作。 MifareClassic 提供对 MIFARE Classic 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 MifareUltralight 提供对 MIFARE Ultralight 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 Android开发文档-高级NFC概览</description>
    </item>
    <item>
      <title>Golang GUI开发总结</title>
      <link>https://solobit.cn/post/golang-gui%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 03 Nov 2022 13:53:12 +0000</pubDate>
      <guid>https://solobit.cn/post/golang-gui%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description> govcl fyne wails walk wxwidgets webview </description>
    </item>
    <item>
      <title>Golang构建桌面程序之webview</title>
      <link>https://solobit.cn/post/golang%E6%9E%84%E5%BB%BA%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E4%B9%8Bwebview/</link>
      <pubDate>Thu, 03 Nov 2022 12:19:36 +0000</pubDate>
      <guid>https://solobit.cn/post/golang%E6%9E%84%E5%BB%BA%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E4%B9%8Bwebview/</guid>
      <description>序 最近接到的任务是开发一个可以在mac和windows上运行的程序，作为一个golang程序员首先想到的自然是golang。跨平台编译运行也让他可以做这件事。结合前面我了解到的一些框架（govcl,fyne,wails,walk,wxwidgets），考虑学习的时间成本我本来是想用fyne来做。直到后来我找到了这个能更快完成需求的包webview。所以今天主要来介绍webview这个可以跨平台生成可执行文件的框架。
Golang 的 webview package </description>
    </item>
    <item>
      <title>docker swarm集群的使用</title>
      <link>https://solobit.cn/post/docker-swarm%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Sep 2022 12:48:35 +0000</pubDate>
      <guid>https://solobit.cn/post/docker-swarm%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>序 咱们书接上回，我搞定了golang程序的编译，搞定了docker镜像的打包，搞定了流水线。现在项目部署与热更新成了我要面对的问题。 受制于公司提供的部署环境（只提供给我一台主机，主机上有docker），我暂时没有k8s集群可用，但又希望能完成基于流水线的自动部署、热更新和不停机更新。所以返现了下面要说的docker swarm
什么是 swarm mode Swarm 是使用 SwarmKit 构建的 Docker 引擎内置（原生）的集群管理和编排工具。具体内容可以参见：基本概念，这里不再详细解释。
集群创建 docker swarm init Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager. To add a worker to this swarm, run the following command: docker swarm join \ --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \ 192.168.99.100:2377 To add a manager to this swarm, run &amp;#39;docker swarm join-token manager&amp;#39; and follow the instructions. 使用docker swarm init命令，创建一个集群，本机的docker就会变成一个单节点的集群。</description>
    </item>
    <item>
      <title>使用alpine构建Docker镜像</title>
      <link>https://solobit.cn/post/%E4%BD%BF%E7%94%A8alpine%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Tue, 27 Sep 2022 11:21:51 +0000</pubDate>
      <guid>https://solobit.cn/post/%E4%BD%BF%E7%94%A8alpine%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F/</guid>
      <description>序 最近的工作中，我使用Golang开发了一个web项目，并准备通过流水线的方式做持续集成与发布。在这是用过程中遇到了一些技术与问题包括：通过make构建golang程序、dockerfile不能访问父级目录、使用Alpine作为基础来制作我的容器镜像
通过Makefile打包Golang程序 什么是Makefile 代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。
关于make命令这里不做深入介绍，引用链接提供介绍清晰明了的直通车（让我们感谢大神🙏） 阮一峰的网络日志-Make命令教程
Golang项目使用Makefile 我对makefile文件的理解是它有点像时一个命令的集合，通过一个个target&amp;lt;目标&amp;gt;可以按照顺序快速的执行多条命令而不用再手动一条条输入。if else与变量的加入让这个流程变得更加丰富和多变。省去了命令输入的同时也让代码运行的流程更加清楚。
示例代码 .PHONY: build clean run # golang 打包可执行文件的运行环境 (可以在运行make命令时传入：make OS=windows) OS=linux BUILD_DOCKER_IMAGE=0 all: build run: go run ./cmd/main.go build: # 下面的GOOS=$(OS)使用了上面定义的OS变量 @GO111MODULE=on GOPROXY=https://goproxy.cn,direct CGO_ENABLED=0 go mod tidy &amp;amp;&amp;amp; GOOS=$(OS) go build -o app main.go # if判断中同样可以使用变量 ifeq ($(BUILD_DOCKER_IMAGE),1) @cd deploy &amp;amp;&amp;amp; docker build -t . endif clean: # 命令前加@会让命令执行但不在控制台输出，这里没有@命令执行时会输出到终端 rm app ifeq ($(BUILD_DOCKER_IMAGE),1) @docker rmi recommend_photo endif Dockerfile不能访问父级目录 项目汇中我使用Dockerfile作为构架docker镜像的基础。通过docker build -t image_name .</description>
    </item>
    <item>
      <title>About</title>
      <link>https://solobit.cn/about/</link>
      <pubDate>Wed, 21 Sep 2022 22:21:41 +0000</pubDate>
      <guid>https://solobit.cn/about/</guid>
      <description>这么长时间干嘛去了 上次更新《关于》页面，是我刚入职到新公司，还在熟悉业务的摸鱼阶段。趁着没有事做稍微写了一下我是谁。这过去的一年半的时间里我深刻学习并落实了摸🐟宗旨，完美做到了应摸尽摸(不是)
其实过去的这段时间里，我认真工作认真生活。上班下班吃饭睡觉。生活过的还算平淡没有什么波澜，所以也就没什么好说的
当前过去的这些时间我也没闲着，折腾了服务器了解了小程序，去看了iOS开发和Android开发相关的内容，算是储备了一些新的东西吧。于此同时我也意识到光靠上班我可能很难达到我500W的目标了，所以今年的计划是去做一些有意思有收益的事～希望各位老板可怜我，有哪个老板需要服务端开发可以联系我(mangk.l@qq.com)
补充一句 我的小城市躺平计划也有在认真执行，现在还差480多玩&amp;hellip;我还得加油！
时隔一年半，我想起来更新了（2024-03-07 21:09:02）
我的标签 我是新时代的农民工、口号学家、喜欢晒网的摸鱼员工、感动中国特别奖获奖嘉宾。但从来不是一个合格的程序员。所以工作几年时间一直也没能沉淀点东西。创建这个站点希望未来能在这里记录下遇到的问题，或者是留下点什么有意思的东西。
工作这些年 从毕业到现在也有近5年的时间了，大部分期望是没有达到的。唯独开发这件事我还一直做着。确实喜欢，再就是现在只有这门手艺能混口饭吃。在某音看有500万就可以在小城市自由了。很好！还差490多万&amp;hellip;我得加油！
先这样，以后想到啥再来补充（2022-09-21 22:38:01）</description>
    </item>
    <item>
      <title>Golang-embed包的使用</title>
      <link>https://solobit.cn/post/golang-embed%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://solobit.cn/post/golang-embed%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>有点懒还没来得及写</description>
    </item>
  </channel>
</rss>
