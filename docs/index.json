[{"content":"序 最近的开发任务中处理了这样一个情况:\n打开小程序是从onLoad判断是否携带参数 判断用户是否登录 如果没有登录需要跳转登录并跳转回来 回来后继续使用(1)中携带的参数处理问题 听起来没有什么难点，我们只需要设置app.globleData就可以很轻松的完成需求。但是我思考问题的点在于登录环节：如果每次有类似的需求都要去改动登录页的代码，那会让登录页面的if条件越来越多，代码可读性也会持续下降。\n于是我开始查找对登录页面修改最少的解决方案：\n使用wx.router来完成需求，但是我不是专业写前端的，而是被拉来救急的，让我去看文档写代码是在太慢了。而且如果整个小程序都改用wx.router，这其中的修改成本也太高了。 使用app.globleData前面说了，也不太可取 最终我发现了wx.navigateTo中的success可以处理我的问题。 所以在这里将我的思路写下来做记录，也提供给有同样需求的人参考。\n还是要用到app.globleData 是的，我的方式中还是要对app.globleData进行设置，但是约定了统一的格式，无论在哪个页面。\nvar pages = getCurrentPages() var curPage = pages[pages.length-1] app.globleData.navigateInfo = { url:\u0026#34;/\u0026#34;+curPage.route, success: function (e) { var page = getCurrentPages().pop() if (page == undefined || page == null) return; page.selectComponent(\u0026#34;#coupon\u0026#34;).runCoupon(); } } 在登录页面只需要判断app.globleData.navigateInfo这一个参数，并在完成登录操作后直接将navigateInfo对象交给wx.navigateTo方法执行就跳回了原来的页面。\n这里面神奇的点在于可以直接执行组件中的某个方法\n","permalink":"https://solobit.cn/post/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwx-navigateto%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/","summary":"序 最近的开发任务中处理了这样一个情况:\n打开小程序是从onLoad判断是否携带参数 判断用户是否登录 如果没有登录需要跳转登录并跳转回来 回来后继续使用(1)中携带的参数处理问题 听起来没有什么难点，我们只需要设置app.globleData就可以很轻松的完成需求。但是我思考问题的点在于登录环节：如果每次有类似的需求都要去改动登录页的代码，那会让登录页面的if条件越来越多，代码可读性也会持续下降。\n于是我开始查找对登录页面修改最少的解决方案：\n使用wx.router来完成需求，但是我不是专业写前端的，而是被拉来救急的，让我去看文档写代码是在太慢了。而且如果整个小程序都改用wx.router，这其中的修改成本也太高了。 使用app.globleData前面说了，也不太可取 最终我发现了wx.navigateTo中的success可以处理我的问题。 所以在这里将我的思路写下来做记录，也提供给有同样需求的人参考。\n还是要用到app.globleData 是的，我的方式中还是要对app.globleData进行设置，但是约定了统一的格式，无论在哪个页面。\nvar pages = getCurrentPages() var curPage = pages[pages.length-1] app.globleData.navigateInfo = { url:\u0026#34;/\u0026#34;+curPage.route, success: function (e) { var page = getCurrentPages().pop() if (page == undefined || page == null) return; page.selectComponent(\u0026#34;#coupon\u0026#34;).runCoupon(); } } 在登录页面只需要判断app.globleData.navigateInfo这一个参数，并在完成登录操作后直接将navigateInfo对象交给wx.navigateTo方法执行就跳回了原来的页面。\n这里面神奇的点在于可以直接执行组件中的某个方法","title":"小程序wx.navigateTo中的闭包"},{"content":"使用acme.sh配置泛域名证书 安装acme.sh 安装 curl https://get.acme.sh | sh -s email=youEmail@email.com 生成泛域名证书： 执行命令 acme.sh --issue --dns -d *.youDomin.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 这时候会输出生成如下内容 Using CA: https://acme.zerossl.com/v2/DV90 Single domain=\u0026#39;*.youDomin.com\u0026#39; Getting domain auth token for each domain Getting webroot for domain=\u0026#39;*.youDomin.com\u0026#39; Add the following TXT record: Domain: \u0026#39;_acme-challenge.youDomin.com\u0026#39; TXT value: \u0026#39;fdlkajflajfkdlJFKLDSAJFLKJDSLKJF\u0026#39; Please be aware that you prepend _acme-challenge. before your domain so the resulting subdomain will be: _acme-challenge.youDomin.com Please add the TXT records to the domains, and re-run with --renew. Please add \u0026#39;--debug\u0026#39; or \u0026#39;--log\u0026#39; to check more details. See: https://github.com/acmesh-official/acme.sh/wiki/How-to-debug-acme.sh 去域名管理后台添加dns记录_acme-challenge.youDomin.com类型为TXT值为fdlkajflajfkdlJFKLDSAJFLKJDSLKJF 3. 执行命令\nacme.sh --renew -d *.youDomin.com --yes-I-know-dns-manual-mode-enough-go-ahead-please 完成验证。 此时证书会被下载到服务器上\n配置nginx自动替换证书 创建目录及文件/etc/nginx/conf.d/ssl/key.pem,/etc/nginx/conf.d/ssl/cert.pem\nacme.sh --install-cert -d *.youDomin.com \\ --key-file /etc/nginx/conf.d/ssl/key.pem \\ --fullchain-file /etc/nginx/conf.d/ssl/cert.pem \\ --reloadcmd \u0026#34;nginx -s reload\u0026#34; 此时证书会被复制到/etc/nginx/conf.d/ssl/目录下。并自动通过命令nginx -s reload重启nginx。所以这里都要替换成自己真是的。\n这样就算完成了，acme.sh创建的定时任务会自动续期证书并更新证书重启nginx 参见：https://github.com/acmesh-official/acme.sh ","permalink":"https://solobit.cn/post/%E5%85%8D%E8%B4%B9%E6%B3%9B%E5%9F%9F%E5%90%8Dssl%E8%AF%81%E4%B9%A6/","summary":"使用acme.sh配置泛域名证书 安装acme.sh 安装 curl https://get.acme.sh | sh -s email=youEmail@email.com 生成泛域名证书： 执行命令 acme.sh --issue --dns -d *.youDomin.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 这时候会输出生成如下内容 Using CA: https://acme.zerossl.com/v2/DV90 Single domain=\u0026#39;*.youDomin.com\u0026#39; Getting domain auth token for each domain Getting webroot for domain=\u0026#39;*.youDomin.com\u0026#39; Add the following TXT record: Domain: \u0026#39;_acme-challenge.youDomin.com\u0026#39; TXT value: \u0026#39;fdlkajflajfkdlJFKLDSAJFLKJDSLKJF\u0026#39; Please be aware that you prepend _acme-challenge. before your domain so the resulting subdomain will be: _acme-challenge.youDomin.com Please add the TXT records to the domains, and re-run with --renew.","title":"免费泛域名SSL证书"},{"content":"序 最近的项目需求中，需要使用NFC芯片来保存一些类似于url的信息并通过iOS或Android手机能正常获取到相关信息，所以针对NFC相关技术与特点进行了学习和总结。我会把我看过教程链接也同步贴到文章中。因为手上只有M1卡，所以下面的主要内容也围绕M1卡来进行\n什么是NFC 近场通信（英语：Near-field communication，NFC），又称近距离无线通信、近距离通信，是一套通信协议，让两个电子设备（其中一个通常是移动设备，例如智能手机）在相距几厘米之内进行通信。NFC，如同过去的电子票券智能卡一般，将允许移动支付取代或支持这类系统。NFC应用于社交网络，分享联系方式、照片、视频或文件。具备 NFC 功能的设备可以充当电子身份证和钥匙卡。NFC 提供了设置简便的低速连接，也可用于引导能力更强的无线连接。\n近场通信技术由非接触式射频识别（RFID）演变而来，由飞利浦半导体（现恩智浦半导体）、诺基亚和索尼共同于2004年研制开发，其基础是RFID及互连技术。近场通信是一种短距高频的无线电技术，在13.56MHz频率运行于20厘米距离内。其传输速度有106 Kbit/秒、212 Kbit/秒或者424 Kbit/秒三种。目前近场通信已通过成为ISO/IEC IS 18092国际标准、EMCA-340标准与ETSI TS 102 190标准。NFC采用主动和被动两种读取模式。\n每一个完整的NFC设备可以用三种模式工作：\n卡模拟模式（Card emulation mode）：这个模式其实就是相当于一张采用RFID技术的IC卡。可以替代现在大量的IC卡（包括信用卡）场合商场刷卡、IPASS、门禁管制、车票、门票等等。此种方式下，有一个极大的优点，那就是卡片通过非接触读卡器的RF域来供电，即便是寄主设备（如手机）没电也可以工作。NFC设备若要进行卡片模拟（Card Emulation）相关应用，则必须内置安全组件（Security Element, SE）之NFC芯片或通过软件实现主机卡模拟(Host Card Emulation，HCE)。 读卡器模式（Reader/Writer mode）：作为非接触读卡器使用，比如从海报或者展览信息电子标签上读取相关信息。 点对点模式（P2P mode）：这个模式和红外线差不多，可用于数据交换，只是传输距离较短，传输创建速度较快，传输速度也快些，功耗低（蓝牙也类似）。将两个具备NFC功能的设备链接，能实现数据点对点传输，如下载音乐、交换图片或者同步设备地址薄。因此通过NFC，多个设备如数位相机、PDA、计算机和手机之间都可以交换资料或者服务。 维基百科-近场通信 百度-NFC\n各种NFC卡的区别 卡 功能描述 普通IC卡 0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。 UID 卡 普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。 CUID 卡 可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。 FUID 卡 不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。 UFUID 卡 高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。 知乎-司小凯-UID卡、IC卡、ID卡、CUID 卡、FUID 卡、UFUID 卡 的区别\nNFC标签类型 目前iOS系统并没有开放过多的NFC权限，所以这里讨论通过Android系统操作NFC标签，以下是Android系统操作NFC标签支持的标签技术类型\nClass Description TagTechnology 这是所有标签技术类都必须实现的接口。 NfcA 提供对 NFC-A (ISO 14443-3A) 属性和 I/O 操作的访问权限。 NfcB 提供对 NFC-B (ISO 14443-3B) 属性和 I/O 操作的访问权限。 NfcF 提供对 NFC-F (JIS 6319-4) 属性和 I/O 操作的访问权限。 NfcV 提供对 NFC-V (ISO 15693) 属性和 I/O 操作的访问权限。 IsoDep 提供对 ISO-DEP (ISO 14443-4) 属性和 I/O 操作的访问权限。 Ndef 提供对 NDEF 格式的 NFC 标签上的 NDEF 数据和操作的访问权限。 NdefFormatable 为可设置为 NDEF 格式的标签提供格式化操作。 MifareClassic 提供对 MIFARE Classic 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 MifareUltralight 提供对 MIFARE Ultralight 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 Android开发文档-高级NFC概览\nNDEF数据格式 这里讲的很详细：\nNDEF技术规范\nMifare Classic标签（M1卡） NFC 有很多协议，其中 MIFARE Classic 基于 ISO 14443-3 Type A 标准，里面有一些 MIFARE 的命令。通过这些命令，就可以控制 MIFARE Classic 卡的内容。MIFARE Classic EV1 4K S70\n杰哥的{运维,编程,调板子}小笔记-MIFARE Classic 上配置 NDEF\nSector\u0026amp;Block 标签的内存布局 在 MIFARE Classic 中，有 Sector 和 Block 的概念，每个 Sector 有若干个 Block，其中最后一个 Block 是特殊的（称为 Sector Trailer），保存了这个 Sector 的一些信息：Key A、Access Bits、GPB 和 Key B。对于 Classic 4K，首先是 32 个有 4 blocks 的 sector，（M1卡）整体的内存布局大概是：\nSector 0: Block 0 (出厂时写入了标签ID，厂商信息等，不可修改) Block 1 Block 2 Block 3(Sector Trailer) Sector 1: Block 4 Block 5 Block 6 Block 7(Sector Trailer) ... Sector 15: Block 60 Block 61 Block 62 Block 63(Sector Trailer) Sector Trailer 的布局如下：\nKey A Access Bits GPB Key B 6字节 3字节 1字节 6字节 A、B密钥与控制位 其中Access Bits（控制位）决定了密钥A、B对每个Block的读写权限，关于控制位详解参见：\nCSDN-小流氓哥哥-IC卡 M1卡 各个扇区 控制块 密码 详解\n读取写入等操作命令 认证： 一条认证指令：0x60 0x05 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF（0x60：使用密钥A[0x61：使用密钥B]，0x05：sector1-block1就是指从0开始编号的第n个块，后面6个16进制数即是密钥A） 读取： 一条读取指令：0x30 0x05 （0x30：读取命令，0x05：sector1-block1就是指从0开始编号的第n个块） 这里是要读取扇区1块0的内容 写入： 一条写入指令：0xA0 0x06 0x64 0x6C 0x2F 0x62 0x75 0x73 0x69 0x6E 0x65 0x73 0x73 0x2F 0x3F 0x74 0x3D 0x6E（0xA0：写入命令，0x06：sector1-block2就是指从0开始编号的第n个块，后面为16个16进制数组成的要写入的内容） 这里要写入扇区1块1的内容为：646C2F627573696E6573732F3F743D6E 内容格式： 文字内容需要将文字对应的Ascii码值转化为16进制 借用微信的能力使用小程序对NFC标签进行读写的时候需要将命令内容转化为二进制内容：\n微信开放社区提问的评论内容\n认证与读写流程 针对扇区的读取与写入操作都需要使用密钥进行验证，验证成功后就可以执行相关的读写命令\nNDEF on Mifare Classic NDEF 只定义了数据格式，但为了实际使用，还得看具体情况。就好像文件内容保存在硬盘上的时候，并不是直接保存，而是通过文件系统，人为定义一个路径，这样大家才知道要从 /etc/shadow 文件去读 Linux 的用户密码信息，NDEF 也需要人为定义一些规则，再作为数据存放在智能卡里的某个地方，这样大家去读取 metadata，发现上 NDEF Tag，然后才会去解析 NDEF 信息。\n有些时候，这个定义很简单，比如直接把 NDEF 数据放在某个 block 里面；有的时候又很复杂，因为可能同时存在很多应用，NDEF 只是其中的一种，所以要有一种类似目录的东西去索引 NDEF“文件”。\nMIFARE Classic 上采用的方法上，在特定的 Sector（比如 Sector 0）放一些元数据，元数据里注明了其他的 Sector（从 1 开始的其它 sector）分别用于什么用途，然后 NDEF 是其中一种用途。这个结构叫做 MIFARE Application Directory。具体来说，在 MIFARE Classic 里面，它规定 Block 1 和 Block 2 的内容如下：\n0-1 2-3 4-5 6-7 8-9 10-11 12-13 14-15 Info \u0026amp; CRC AID AID AID AID AID AID AID AID AID AID AID AID AID AID AID 第一个字节是 CRC 8，它的定义可以在这里的 CRC-8/MIFARE-MAD 里找到：初始值 0xC7，多项式上 0x1D。参与 CRC 计算的是按顺序从第二个字节开始的 31 个字节。\n第二个字节是 Info Byte，用处不大，见 MAD 的文档。\n之后每两个字节对应一个 Sector 的 AID（Application ID），比如 Block 1 的 2-3 字节对应 Sector 1 的 AID，Block 1 的 4-5 字节对应 Sector 2 的 AID，最后 Block 2 的 14-15 字节对应 Sector 15 的 AID。NDEF 的 AID 就是 0x03 0xE1。当软件发现这里的 AID 是 0x03E1 的时候，它就会去相应的 Sector 去读取 NDEF 信息。\n省流助手：[0x14 0x01]可以理解为标记扇区0为索引，[0x03 0xE1]可以理解为标记扇区为NDEF消息储存空间。所以一个将NDEF信息记录在Mifare Classic标签上的数据形式大概类似这样：\nSector0 Block0 E7 CA C1 B3 5F 08 04 00 02 78 B1 F6 C9 6F FA 1D（芯片ID与厂商信息） Block1 14 01 03 E1 03 E1 03 E1 03 E1 03 E1 03 E1 03 E1（相当于所有扇区的类型索引） Block2 03 E1 03 E1 03 E1 03 E1 03 E1 03 E1 03 E1 14 01（相当于所有扇区的类型索引） Block3 A0 A1 A2 A3 A4 A5 78 77 88 C1 B0 B1 B2 B3 B4 B5（密钥A：A0A1A2A3A4A5 控制位：787788[表示扇区0密钥A只读，密钥B读写] C1[C1实际上不参与控制，可以用来替换成其他的内容保存用户数据] 密钥B：B0B1B2B3B4B5） Sector1 Block0 48 45 4C 4C 4F 59 4F 52 4C 44 00 00 00 00 00 00（自定义的数据内容，翻译：HELLOWORLD） Block1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00（没有填写内容） Block2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00（没有填写内容） Block3 FF FF FF FF FF FF 78 77 88 C1 FF FF FF FF FF FF（密钥与控制位） Sector2 Block0 Block1 Block2 Block3 ...... Sector16 Block0 Block1 Block2 Block3 通过微信小程序读写标签 以上内容，主要是基础知识的补充，下面是真正的干货demo\n这里是我开源的用来对MifareClassic芯片（M1芯片）进行读写的项目\nThe end 再次感谢以上文章引用中提到的博主与作者！！！\n","permalink":"https://solobit.cn/post/nfc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E8%AF%BB%E5%86%99/","summary":"序 最近的项目需求中，需要使用NFC芯片来保存一些类似于url的信息并通过iOS或Android手机能正常获取到相关信息，所以针对NFC相关技术与特点进行了学习和总结。我会把我看过教程链接也同步贴到文章中。因为手上只有M1卡，所以下面的主要内容也围绕M1卡来进行\n什么是NFC 近场通信（英语：Near-field communication，NFC），又称近距离无线通信、近距离通信，是一套通信协议，让两个电子设备（其中一个通常是移动设备，例如智能手机）在相距几厘米之内进行通信。NFC，如同过去的电子票券智能卡一般，将允许移动支付取代或支持这类系统。NFC应用于社交网络，分享联系方式、照片、视频或文件。具备 NFC 功能的设备可以充当电子身份证和钥匙卡。NFC 提供了设置简便的低速连接，也可用于引导能力更强的无线连接。\n近场通信技术由非接触式射频识别（RFID）演变而来，由飞利浦半导体（现恩智浦半导体）、诺基亚和索尼共同于2004年研制开发，其基础是RFID及互连技术。近场通信是一种短距高频的无线电技术，在13.56MHz频率运行于20厘米距离内。其传输速度有106 Kbit/秒、212 Kbit/秒或者424 Kbit/秒三种。目前近场通信已通过成为ISO/IEC IS 18092国际标准、EMCA-340标准与ETSI TS 102 190标准。NFC采用主动和被动两种读取模式。\n每一个完整的NFC设备可以用三种模式工作：\n卡模拟模式（Card emulation mode）：这个模式其实就是相当于一张采用RFID技术的IC卡。可以替代现在大量的IC卡（包括信用卡）场合商场刷卡、IPASS、门禁管制、车票、门票等等。此种方式下，有一个极大的优点，那就是卡片通过非接触读卡器的RF域来供电，即便是寄主设备（如手机）没电也可以工作。NFC设备若要进行卡片模拟（Card Emulation）相关应用，则必须内置安全组件（Security Element, SE）之NFC芯片或通过软件实现主机卡模拟(Host Card Emulation，HCE)。 读卡器模式（Reader/Writer mode）：作为非接触读卡器使用，比如从海报或者展览信息电子标签上读取相关信息。 点对点模式（P2P mode）：这个模式和红外线差不多，可用于数据交换，只是传输距离较短，传输创建速度较快，传输速度也快些，功耗低（蓝牙也类似）。将两个具备NFC功能的设备链接，能实现数据点对点传输，如下载音乐、交换图片或者同步设备地址薄。因此通过NFC，多个设备如数位相机、PDA、计算机和手机之间都可以交换资料或者服务。 维基百科-近场通信 百度-NFC\n各种NFC卡的区别 卡 功能描述 普通IC卡 0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。 UID 卡 普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。 CUID 卡 可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。 FUID 卡 不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。 UFUID 卡 高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。 知乎-司小凯-UID卡、IC卡、ID卡、CUID 卡、FUID 卡、UFUID 卡 的区别\nNFC标签类型 目前iOS系统并没有开放过多的NFC权限，所以这里讨论通过Android系统操作NFC标签，以下是Android系统操作NFC标签支持的标签技术类型\nClass Description TagTechnology 这是所有标签技术类都必须实现的接口。 NfcA 提供对 NFC-A (ISO 14443-3A) 属性和 I/O 操作的访问权限。 NfcB 提供对 NFC-B (ISO 14443-3B) 属性和 I/O 操作的访问权限。 NfcF 提供对 NFC-F (JIS 6319-4) 属性和 I/O 操作的访问权限。 NfcV 提供对 NFC-V (ISO 15693) 属性和 I/O 操作的访问权限。 IsoDep 提供对 ISO-DEP (ISO 14443-4) 属性和 I/O 操作的访问权限。 Ndef 提供对 NDEF 格式的 NFC 标签上的 NDEF 数据和操作的访问权限。 NdefFormatable 为可设置为 NDEF 格式的标签提供格式化操作。 MifareClassic 提供对 MIFARE Classic 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 MifareUltralight 提供对 MIFARE Ultralight 属性和 I/O 操作的访问权限（如果此 Android 设备支持 MIFARE）。 Android开发文档-高级NFC概览","title":"NFC基础知识与读写"},{"content":" govcl fyne wails walk wxwidgets webview ","permalink":"https://solobit.cn/post/golang-gui%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/","summary":" govcl fyne wails walk wxwidgets webview ","title":"Golang GUI开发总结"},{"content":"序 最近接到的任务是开发一个可以在mac和windows上运行的程序，作为一个golang程序员首先想到的自然是golang。跨平台编译运行也让他可以做这件事。结合前面我了解到的一些框架（govcl,fyne,wails,walk,wxwidgets），考虑学习的时间成本我本来是想用fyne来做。直到后来我找到了这个能更快完成需求的包webview。所以今天主要来介绍webview这个可以跨平台生成可执行文件的框架。\nGolang 的 webview package ","permalink":"https://solobit.cn/post/golang%E6%9E%84%E5%BB%BA%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E4%B9%8Bwebview/","summary":"序 最近接到的任务是开发一个可以在mac和windows上运行的程序，作为一个golang程序员首先想到的自然是golang。跨平台编译运行也让他可以做这件事。结合前面我了解到的一些框架（govcl,fyne,wails,walk,wxwidgets），考虑学习的时间成本我本来是想用fyne来做。直到后来我找到了这个能更快完成需求的包webview。所以今天主要来介绍webview这个可以跨平台生成可执行文件的框架。\nGolang 的 webview package ","title":"Golang构建桌面程序之webview"},{"content":"序 咱们书接上回，我搞定了golang程序的编译，搞定了docker镜像的打包，搞定了流水线。现在项目部署与热更新成了我要面对的问题。 受制于公司提供的部署环境（只提供给我一台主机，主机上有docker），我暂时没有k8s集群可用，但又希望能完成基于流水线的自动部署、热更新和不停机更新。所以返现了下面要说的docker swarm\n什么是 swarm mode Swarm 是使用 SwarmKit 构建的 Docker 引擎内置（原生）的集群管理和编排工具。具体内容可以参见：基本概念，这里不再详细解释。\n集群创建 docker swarm init Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager. To add a worker to this swarm, run the following command: docker swarm join \\ --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\ 192.168.99.100:2377 To add a manager to this swarm, run \u0026#39;docker swarm join-token manager\u0026#39; and follow the instructions. 使用docker swarm init命令，创建一个集群，本机的docker就会变成一个单节点的集群。\n","permalink":"https://solobit.cn/post/docker-swarm%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8/","summary":"序 咱们书接上回，我搞定了golang程序的编译，搞定了docker镜像的打包，搞定了流水线。现在项目部署与热更新成了我要面对的问题。 受制于公司提供的部署环境（只提供给我一台主机，主机上有docker），我暂时没有k8s集群可用，但又希望能完成基于流水线的自动部署、热更新和不停机更新。所以返现了下面要说的docker swarm\n什么是 swarm mode Swarm 是使用 SwarmKit 构建的 Docker 引擎内置（原生）的集群管理和编排工具。具体内容可以参见：基本概念，这里不再详细解释。\n集群创建 docker swarm init Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager. To add a worker to this swarm, run the following command: docker swarm join \\ --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\ 192.168.99.100:2377 To add a manager to this swarm, run \u0026#39;docker swarm join-token manager\u0026#39; and follow the instructions. 使用docker swarm init命令，创建一个集群，本机的docker就会变成一个单节点的集群。","title":"docker swarm集群的使用"},{"content":"序 最近的工作中，我使用Golang开发了一个web项目，并准备通过流水线的方式做持续集成与发布。在这是用过程中遇到了一些技术与问题包括：通过make构建golang程序、dockerfile不能访问父级目录、使用Alpine作为基础来制作我的容器镜像\n通过Makefile打包Golang程序 什么是Makefile 代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。\n关于make命令这里不做深入介绍，引用链接提供介绍清晰明了的直通车（让我们感谢大神🙏） 阮一峰的网络日志-Make命令教程\nGolang项目使用Makefile 我对makefile文件的理解是它有点像时一个命令的集合，通过一个个target\u0026lt;目标\u0026gt;可以按照顺序快速的执行多条命令而不用再手动一条条输入。if else与变量的加入让这个流程变得更加丰富和多变。省去了命令输入的同时也让代码运行的流程更加清楚。\n示例代码 .PHONY: build clean run # golang 打包可执行文件的运行环境 (可以在运行make命令时传入：make OS=windows) OS=linux BUILD_DOCKER_IMAGE=0 all: build run: go run ./cmd/main.go build: # 下面的GOOS=$(OS)使用了上面定义的OS变量 @GO111MODULE=on GOPROXY=https://goproxy.cn,direct CGO_ENABLED=0 go mod tidy \u0026amp;\u0026amp; GOOS=$(OS) go build -o app main.go # if判断中同样可以使用变量 ifeq ($(BUILD_DOCKER_IMAGE),1) @cd deploy \u0026amp;\u0026amp; docker build -t . endif clean: # 命令前加@会让命令执行但不在控制台输出，这里没有@命令执行时会输出到终端 rm app ifeq ($(BUILD_DOCKER_IMAGE),1) @docker rmi recommend_photo endif Dockerfile不能访问父级目录 项目汇中我使用Dockerfile作为构架docker镜像的基础。通过docker build -t image_name .可以将内容打包成本地的docker镜像。但是鉴于我现有的项目目录结构使得COPY无法找到对应的文件，在查阅docker build命令后，发现可以通过-f选项来执行相关目录。\n我的目录结构 . ├── README.md ├── cmd │ └── main.go ├── conf │ ├── ... ├── deploy │ └── Dockerfile ├── http │ ├── ... ├── model │ ├── ... ├── makefile ├── go.mod ├── go.sum ├── config.yaml ├── sample.config.yaml 解决Dockerbuild目录可见性问题（使用 -f 选项） docker与dockerfile的关系这里不再阐述。这只单独介绍docker build-f选项的使用\n➜ project git:(dev) docker build -h Flag shorthand -h has been deprecated, please use --help Usage: docker build [OPTIONS] PATH | URL | - Build an image from a Dockerfile Options: --add-host list Add a custom host-to-IP mapping (host:ip) --build-arg list Set build-time variables --cache-from strings Images to consider as cache sources --disable-content-trust Skip image verification (default true) -f, --file string Name of the Dockerfile (Default is \u0026#39;PATH/Dockerfile\u0026#39;) ... 平时使用docker build一般是在根目录存在Dockerfile，构建的时候Dockerfile会在当前目录寻找需要的文件，但是在我的目录结构中，Dockerfile被放到了deploy目录下，导致我在根目录执行docker build会找不到file，但是cd到deploy目录里又会导致Dockerfile找不到根目录的文件。所以这里-f选项就可以使用了：\ndocker build -t name:tag -f deploy/Dockerfile ./deploy -f选项指定了Dockerfile所在的目录，最后的./deploy是docker构建使用的根目录\n向Dockerfile中传递编译参数 通过-build-arg {ARG_NAME}={value}可以传递参数，那么在dockerfile中，通过arg 定义的变量可以接收到传递到参数ARG ARG_NAME=hello\n使用Alpine作为基础来制作我的容器镜像 Docker打包出的镜像超过1G让我不能接受 在项目刚写完的时候，我使用golang官网的docker镜像作为基础来构建我自己的镜像。这样做可以不用担心环境问题，打包golang构建docker一气呵成固然方便，但当我看到我的镜像有1.2G大的时候猛打了一个寒颤～这是在超出我的所料。 作为追求精简的程序员，这种情况不允许发生在我的项目里，于是便有了下面的内容\nAlpine镜像是什么 Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc(注意这里，是个坑) 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐。在保持瘦身的同时，Alpine 还提供了自己的包管理工具 apk，可以通过 https://pkgs.alpinelinux.org/packages 网站上查询包信息，也可以直接通过 apk 命令直接查询和安装各种软件。\n将golang编译与docker打包拆分 为了尽可能的减小docker镜像的体积，我采用了只将golang可执行文件与config文件打包进镜像的方案（大家可以制作自己的打包服务器或者直接使用各种CI/CD流水线来帮助构建镜像）。在这之后，我的小而美的docker镜像中只存在两个必要文件app(可执行文件) \u0026amp; config.yaml。而我的镜像也变成了精简的49MB\n制作镜像时遇到的问题 可是当我使用镜像构建容器的时候，却总是提示\n➜ project git:(dev) docker run -it --rm 351b4d544b4e exec /app/app: no such file or directory 开始很没头绪，因为使用了阿里云的流水线服务所以我还特意发了工单去询问（这显得我很白痴）。后来我通过docker save imageID \u0026gt; filename.tar的方式将镜像下载到本地，然后解压去查找对应的文件，发现/app/app可执行文件就好好的躺在它该在的目录。这时候我才把目光转向了我的基础镜像。于是发现并解决了如下问题(部分内容引用自使用Alpine作为基础镜像时可能会遇到的常见问题的解决方法)：\n镜像中存在可执行文件但是报错no such file or directory 由于golang构建与docker基于alpine打包分开 我的二进制文件是使用动态链接方式编译了一个使用了GLIBC库的程序生成的，但是alpne镜像中没有GLIBC库而是用的MUSL LIBC库，这样就会导致该二进制文件无法被执行。 解决方案一般有两种：\n改为静态编译 如果要使用动态链接函数编译的话，不要依赖GLIBC（比如编译Go程序的时候指定CGO_ENABLED=0 ）或者在alpine中编译一个依赖MUSL LIBC的版本 追求精简的我选择了第一种静态编译 同时也实测简单的指定CGO_ENABLED=0并不完全解决问题\nalpine时区问题 有些使用 alpine 作为基础镜像的 go 程序镜像可能会出现类似下面这样的错误:\npanic: open /usr/local/go/lib/time/zoneinfo.zip: no such file or directory Init mysql error: unknown time zone Asia/Shanghai 常见原因：alpine 基础镜像中没有包含时区信息文件，当代码中有调用类似下面这样的通过名称获取时区信息的时候，就会出现上面的错误。 所以需要我们在构建镜像是安装自己需要的时区文件,之后就不会存在时区问题了\nFROM alpine:latest WORKDIR /app ENV TZ Asia/Shanghai RUN apk update \u0026amp;\u0026amp; apk add tzdata RUN cp /usr/share/zoneinfo/${TZ} /etc/localtime \\ \u0026amp;\u0026amp; echo ${TZ} \u0026gt; /etc/timezone ... 以上，解决了我这次项目中的问题。\n本来还想写一下关于golang静态编译的问题，但发现我还没有真正搞明白，所以先贴个链接吧，以后再写：https://juejin.cn/post/7053450610386468894\n","permalink":"https://solobit.cn/post/%E4%BD%BF%E7%94%A8alpine%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F/","summary":"序 最近的工作中，我使用Golang开发了一个web项目，并准备通过流水线的方式做持续集成与发布。在这是用过程中遇到了一些技术与问题包括：通过make构建golang程序、dockerfile不能访问父级目录、使用Alpine作为基础来制作我的容器镜像\n通过Makefile打包Golang程序 什么是Makefile 代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。\n关于make命令这里不做深入介绍，引用链接提供介绍清晰明了的直通车（让我们感谢大神🙏） 阮一峰的网络日志-Make命令教程\nGolang项目使用Makefile 我对makefile文件的理解是它有点像时一个命令的集合，通过一个个target\u0026lt;目标\u0026gt;可以按照顺序快速的执行多条命令而不用再手动一条条输入。if else与变量的加入让这个流程变得更加丰富和多变。省去了命令输入的同时也让代码运行的流程更加清楚。\n示例代码 .PHONY: build clean run # golang 打包可执行文件的运行环境 (可以在运行make命令时传入：make OS=windows) OS=linux BUILD_DOCKER_IMAGE=0 all: build run: go run ./cmd/main.go build: # 下面的GOOS=$(OS)使用了上面定义的OS变量 @GO111MODULE=on GOPROXY=https://goproxy.cn,direct CGO_ENABLED=0 go mod tidy \u0026amp;\u0026amp; GOOS=$(OS) go build -o app main.go # if判断中同样可以使用变量 ifeq ($(BUILD_DOCKER_IMAGE),1) @cd deploy \u0026amp;\u0026amp; docker build -t . endif clean: # 命令前加@会让命令执行但不在控制台输出，这里没有@命令执行时会输出到终端 rm app ifeq ($(BUILD_DOCKER_IMAGE),1) @docker rmi recommend_photo endif Dockerfile不能访问父级目录 项目汇中我使用Dockerfile作为构架docker镜像的基础。通过docker build -t image_name .","title":"使用alpine构建Docker镜像"},{"content":"我的标签 我是新时代的农民工、口号学家、喜欢晒网的摸鱼员工、感动中国特别奖获奖嘉宾。但从来不是一个合格的程序员。所以工作几年时间一直也没能沉淀点东西。创建这个站点希望未来能在这里记录下遇到的问题，或者是留下点什么有意思的东西。\n工作这些年 从毕业到现在也有近5年的时间了，大部分期望是没有达到的。唯独开发这件事我还一直做着。确实喜欢，再就是现在只有这门手艺能混口饭吃。在某音看有500万就可以在小城市自由了。很好！还差490多万\u0026hellip;我得加油！\n先这样，以后想到啥再来补充（2022-09-21 22:38）\n","permalink":"https://solobit.cn/about/","summary":"我的标签 我是新时代的农民工、口号学家、喜欢晒网的摸鱼员工、感动中国特别奖获奖嘉宾。但从来不是一个合格的程序员。所以工作几年时间一直也没能沉淀点东西。创建这个站点希望未来能在这里记录下遇到的问题，或者是留下点什么有意思的东西。\n工作这些年 从毕业到现在也有近5年的时间了，大部分期望是没有达到的。唯独开发这件事我还一直做着。确实喜欢，再就是现在只有这门手艺能混口饭吃。在某音看有500万就可以在小城市自由了。很好！还差490多万\u0026hellip;我得加油！\n先这样，以后想到啥再来补充（2022-09-21 22:38）","title":"About"},{"content":"有点懒还没来得及写\n","permalink":"https://solobit.cn/post/golang-embed%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/","summary":"有点懒还没来得及写","title":"Golang-embed包的使用"}]